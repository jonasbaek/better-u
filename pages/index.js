import axios from "axios";
import Head from "next/head";
import Image from "next/image";
import toast from "react-hot-toast";
import NavBar from "../components/nav-bar";
import useSWR from "swr";
import FriendList from "../components/friend-list";
import PostProfile from "../components/post-profile";
import PostStatus from "../components/post-status";
import Post from "../components/post";
import { useRouter } from "next/router";
import { getCookie, deleteCookie } from "cookies-next";
import styles from "../styles/styles.module.scss";
import useWindowSize from "../customHooks/useWindowSize";
import { useEffect, useState } from "react";
import { ConstructionOutlined } from "@mui/icons-material";
import InfiniteScroll from "react-infinite-scroll-component";

export const getServerSideProps = ({ req, res }) => {
  const token = getCookie("jwt", { req, res });
  if (!token) {
    return {
      redirect: {
        permanent: false,
        destination: "/login",
      },
    };
  }
  return { props: { token: token } };
};

export default function BetterUPage(props) {
  const windowSize = useWindowSize();
  const [showMorePosts, setShowMorePosts] = useState({
    nextUrl: "",
    posts: [],
    hasMore: true,
    dirty: false,
  });
  const [isLoading, setIsLoading] = useState(true);

  const display = {
    xl: 1040,
    lg: 960,
    md: 720,
    sm: 540,
  };

  const router = useRouter();
  const apiUrl = process.env.NEXT_PUBLIC_API_URL;
  const fetchOptions = {
    headers: {
      Authorization: `Bearer ${props.token}`,
    },
  };
  const fetcher = async (url, pagination = "") =>
    await axios.get(`${url}${pagination ? pagination : ""}`, fetchOptions);
  const validateToken = useSWR(`${apiUrl}/auth/validate`, fetcher);

  useEffect(() => {
    if (validateToken.error) {
      deleteCookie("jwt");
      router.push("/login");
    }
  }, [validateToken, router]);

  const usersFetch = useSWR(`${apiUrl}/user`, fetcher);
  const currentUserFetch = useSWR(`${apiUrl}/user/me`, fetcher);
  const postsFetch = useSWR(
    [`${apiUrl}/posts`, showMorePosts.nextUrl],
    ([url, pagination]) => fetcher(url, pagination)
  );

  useEffect(() => {
    const waitForInitialDataFetch = () => {
      setTimeout(() => {
        if (
          !usersFetch.isLoading &&
          !currentUserFetch.isLoading &&
          !postsFetch.isLoading
        ) {
          const { data } = postsFetch;
          if (!showMorePosts.dirty) {
            setShowMorePosts({
              nextUrl: data.data.nextUrl,
              posts: [...data.data.posts],
              hasMore: !(data.data.posts.length === data.data.total),
              dirty: true,
            });
            setIsLoading(false);
          }
        }
      }, 300);
    };
    waitForInitialDataFetch();
  }, [usersFetch.isLoading, currentUserFetch.isLoading, postsFetch.isLoading]);

  const data = {
    currentUser: currentUserFetch?.data?.data,
    posts: postsFetch?.data?.data,
    users: usersFetch?.data?.data,
  };

  const fetchMorePosts = () => {
    setShowMorePosts({
      nextUrl: data.posts.nextUrl,
      hasMore: !(data.posts.posts.length === data.posts.total),
      posts: [...data.posts.posts],
      dirty: true,
    });
  };

  const createPost = async (formData) => {
    try {
      await axios.post(`${apiUrl}/posts`, formData, fetchOptions);
      const { data } = await postsFetch.mutate();
      setShowMorePosts({
        nextUrl: data.nextUrl,
        hasMore: !(data.posts.length === data.total),
        posts: [...data.posts],
        dirty: true,
      });
      toast.success("Post created successfully");
    } catch (error) {
      toast.error(`${error}`);
    }
  };

  const removePost = async (postId) => {
    try {
      await axios.delete(`${apiUrl}/posts/${postId}`, fetchOptions);
      const { data } = await postsFetch.mutate();
      setShowMorePosts({
        nextUrl: data.nextUrl,
        hasMore: !(data.posts.length === data.total),
        posts: [...data.posts],
        dirty: true,
      });
      toast.success("Post deleted successfully");
    } catch (error) {
      toast.error(`${error}`);
    }
  };

  const addOrRemoveFriend = async (friendId) => {
    try {
      const res = await axios.patch(
        `${apiUrl}/user/add/${friendId}`,
        {},
        fetchOptions
      );
      if (res) {
        currentUserFetch.mutate();
        postsFetch.mutate();
        toast.success(`${res.data.message}`);
      }
    } catch (error) {
      toast.error(`${error}`);
    }
  };

  const likePost = async (postId) => {
    try {
      const res = await axios.patch(
        `${apiUrl}/posts/${postId}/like`,
        {},
        fetchOptions
      );
      if (res) {
        currentUserFetch.mutate();
        postsFetch.mutate();
      }
    } catch (error) {
      toast.error(`${error}`);
    }
  };

  return (
    <>
      <Head>
        <title>Better-U</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {isLoading ? (
          <p>Loading</p>
        ) : (
          <>
            <NavBar token={props.token} data={data} />
            <div className="row mx-2">
              <div
                className={`p-2 ${
                  windowSize[0] > display.lg ? "col-3" : "col-4"
                }`}
              >
                <PostProfile currentUser={data.currentUser} />
                {windowSize[0] <= display.lg && windowSize[0] > display.md && (
                  <FriendList
                    addOrRemoveFriend={addOrRemoveFriend}
                    currentUser={data.currentUser}
                  />
                )}
              </div>

              <div
                className={`p-2 ${
                  windowSize[0] > display.lg ? "col-6" : "col-8"
                }`}
              >
                <PostStatus createPost={createPost} data={data} />
                <InfiniteScroll
                  dataLength={showMorePosts.posts.length}
                  next={fetchMorePosts}
                  hasMore={showMorePosts.hasMore}
                  loader={<h4>Loading...</h4>}
                  endMessage={
                    <p style={{ textAlign: "center" }}>
                      <b>Yay! You have seen it all</b>
                    </p>
                  }
                >
                  {showMorePosts.posts?.map((post, i) => {
                    return (
                      <Post
                        key={i}
                        post={post}
                        currentUser={data.currentUser}
                        removePost={removePost}
                        likePost={likePost}
                        addOrRemoveFriend={addOrRemoveFriend}
                      />
                    );
                  })}
                </InfiniteScroll>
              </div>
              {windowSize[0] > display.lg && (
                <div className="col-3 p-2">
                  <FriendList
                    addOrRemoveFriend={addOrRemoveFriend}
                    currentUser={data.currentUser}
                  />
                </div>
              )}
            </div>
          </>
        )}
      </main>
    </>
  );
}
