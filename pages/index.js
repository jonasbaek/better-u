import Head from "next/head";
import NavBar from "../components/nav-bar";
import FriendList from "../components/friend-list";
import PostProfile from "../components/post-profile";
import PostStatus from "../components/post-status";
import Post from "../components/post";
import { getCookie, deleteCookie } from "cookies-next";
import useWindowSize from "../customHooks/useWindowSize";
import { useEffect, useState, useContext } from "react";
import { FetchContext } from "../providers/FetchContextProvider";
import useValidateToken from "../customHooks/useValidateToken";
import InfiniteScroll from "react-infinite-scroll-component";
import { display } from "../util/display";

export const getServerSideProps = ({ req, res }) => {
  const token = getCookie("jwt", { req, res });
  if (!token) {
    return {
      redirect: {
        permanent: false,
        destination: "/login",
      },
    };
  }
  return { props: { token: token } };
};

export default function BetterUPage(props) {
  useValidateToken();
  const [isLoading, setIsLoading] = useState(true);
  const windowSize = useWindowSize();
  const {
    showMorePosts,
    postsFetch,
    createPostService,
    removePostService,
    likePostService,
    fetchMorePosts,
    usersFetch,
    addOrRemoveFriendService,
    updateUser,
    currentUserFetch,
    searchByNameFetch,
    updatePostService,
    currentUser,
    createCommentService,
    commentsFetch,
    removeCommentService,
  } = useContext(FetchContext);

  useEffect(() => {
    const waitForInitialDataFetch = () => {
      setTimeout(() => {
        if (
          !usersFetch.isLoading &&
          !currentUserFetch.isLoading &&
          !postsFetch.isLoading
        ) {
          setIsLoading(false);
        }
      }, 150);
    };
    waitForInitialDataFetch();
  }, [usersFetch.isLoading, currentUserFetch.isLoading, postsFetch.isLoading]);

  return (
    <>
      <Head>
        <title>Better-U</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {isLoading ? (
          <p>Loading</p>
        ) : (
          <>
            <NavBar
              token={props.token}
              currentUser={currentUser}
              searchByNameFetch={searchByNameFetch}
            />
            <div className="row m-auto">
              <div className="col-12 col-md-4 col-lg-3 px-2">
                <PostProfile
                  currentUser={currentUser}
                  currentUserFetch={currentUserFetch}
                  postsFetch={postsFetch}
                  updateUser={updateUser}
                />
                {windowSize[0] <= display.lg && windowSize[0] >= display.md && (
                  <FriendList
                    currentUser={currentUser}
                    addOrRemoveFriendService={addOrRemoveFriendService}
                    currentUserFetch={currentUserFetch}
                  />
                )}
              </div>

              <div className="col-12 col-md-8 col-lg-6 px-2">
                <PostStatus
                  currentUser={currentUser}
                  createPostService={createPostService}
                  currentUserFetch={currentUserFetch}
                />

                <InfiniteScroll
                  dataLength={showMorePosts.posts.length}
                  next={fetchMorePosts}
                  hasMore={showMorePosts.hasMore}
                  loader={<h4>Loading...</h4>}
                  endMessage={
                    <p style={{ textAlign: "center" }}>
                      <b>Yay! You have seen it all</b>
                    </p>
                  }
                >
                  {showMorePosts.posts?.map((post) => {
                    return (
                      <Post
                        key={post.id}
                        post={post}
                        currentUser={currentUser}
                        currentUserFetch={currentUserFetch}
                        removePostService={removePostService}
                        updatePostService={updatePostService}
                        likePostService={() =>
                          likePostService(post.id, currentUserFetch)
                        }
                        createCommentService={createCommentService}
                        commentsFetch={commentsFetch}
                        postsFetch={postsFetch}
                        removeCommentService={removeCommentService}
                      />
                    );
                  })}
                </InfiniteScroll>
              </div>
              {windowSize[0] >= display.lg && (
                <div className="col-3 px-2">
                  <FriendList
                    currentUser={currentUser}
                    addOrRemoveFriendService={addOrRemoveFriendService}
                    currentUserFetch={currentUserFetch}
                  />
                </div>
              )}
            </div>
          </>
        )}
      </main>
    </>
  );
}
