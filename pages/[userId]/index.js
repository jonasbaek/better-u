import { useState, useEffect, useContext } from "react";
import { useRouter } from "next/router";
import { getCookie } from "cookies-next";
import axios from "axios";
import Head from "next/head";
import Post from "../../components/post";
import NavBar from "../../components/nav-bar";
import Profile from "../../components/profile";
import { FetchContext } from "../../providers/FetchContextProvider";
import useValidateToken from "../../customHooks/useValidateToken";
import InfiniteScroll from "react-infinite-scroll-component";
import styles from "../../styles/styles.module.scss";

export const getServerSideProps = async ({ req, res, params }) => {
  try {
    const token = getCookie("jwt", { req, res });
    const fetchOptions = {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    };
    const { data } = await axios.get(
      `${process.env.NEXT_PUBLIC_API_URL}/user/${params.userId}`,
      fetchOptions
    );

    if (!token) {
      return {
        redirect: {
          permanent: false,
          destination: "/login",
        },
      };
    }
    if (!data) {
      return {
        redirect: {
          permanent: false,
          destination: "/",
        },
      };
    }

    return { props: { token: token, user: data } };
  } catch (error) {
    return {
      redirect: {
        permanent: false,
        destination: "/",
      },
    };
  }
};

export default function UserPage(props) {
  useValidateToken();
  const [postsFromUserProfile, setPostsFromUserProfile] = useState([]);
  const router = useRouter();
  const refreshData = () => {
    router.replace(router.asPath);
  };
  const {
    postsFetch,
    showMorePosts,
    fetchMorePosts,
    removePostService,
    addOrRemoveFriendService,
    updateUser,
    currentUserFetch,
    searchByNameFetch,
    updatePostService,
    likePostService,
    currentUser,
  } = useContext(FetchContext);

  useEffect(() => {
    const filterPostsFromUser = () => {
      const postsFromUser = showMorePosts.posts.filter(
        (post) => post.user.id === props.user._id
      );
      return postsFromUser;
    };
    setPostsFromUserProfile(filterPostsFromUser());
  }, [props.user, showMorePosts]);

  return (
    <>
      <Head>
        <title></title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <NavBar
          token={props.token}
          currentUser={currentUser}
          searchByNameFetch={searchByNameFetch}
        />
        <div className={styles.profilePageContainer}>
          <Profile
            user={props.user}
            refreshData={refreshData}
            addOrRemoveFriendService={addOrRemoveFriendService}
            currentUser={currentUser}
            currentUserFetch={currentUserFetch}
            postsFetch={postsFetch}
            updateUser={updateUser}
          />
          <InfiniteScroll
            dataLength={showMorePosts.posts.length}
            next={fetchMorePosts}
            hasMore={showMorePosts.hasMore}
            loader={<h4>Loading...</h4>}
            endMessage={
              <p style={{ textAlign: "center" }}>
                <b>...</b>
              </p>
            }
          >
            {postsFromUserProfile?.map((post, i) => {
              return (
                <Post
                  key={i}
                  post={post}
                  currentUser={currentUser}
                  currentUserFetch={currentUserFetch}
                  removePostService={removePostService}
                  updatePostService={updatePostService}
                  likePostService={() =>
                    likePostService(post.id, currentUserFetch)
                  }
                />
              );
            })}
          </InfiniteScroll>
        </div>
      </main>
    </>
  );
}
